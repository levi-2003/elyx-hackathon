# -*- coding: utf-8 -*-
"""elyx

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xr8c1aJpAsA4QeUuXLCxDdTC5z8cEc-v
"""

pip install langgraph requests

API_KEY = "AIzaSyATXRs1ySzWhrT3CiWZaG6Ty7aCTy8kS7c"

import os
import json
import time
import requests
from typing import TypedDict, List, Dict
from langgraph.graph import StateGraph, END
import random
from datetime import datetime, timedelta

API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={API_KEY}"
OUTPUT_FILENAME = "full_conversation_log_langgraph_detailed.txt"

# --- 1. State Definition for the Graph ---

class GraphState(TypedDict):
    """Represents the state of our simulation graph, now on a weekly basis."""
    conversation_history: List[str]
    current_week: int
    # FIX: Added current_date to the state to manage the timeline.
    current_date: str
    member_profile: Dict
    elyx_team: Dict
    turn_taker: str
    event_queue: List[str]
    simulation_complete: bool
    interaction_count_this_week: int
    last_saved_index: int

# --- 2. LLM Call Function ---

def call_generative_model(prompt: str) -> str:
    """Calls the generative AI model API with a given prompt and handles retries."""
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": { "temperature": 0.7, "topP": 0.9, "maxOutputTokens": 8192 }
    }
    headers = {'Content-Type': 'application/json'}
    delay = 1
    for i in range(5):
        try:
            response = requests.post(API_URL, headers=headers, json=payload, timeout=90)
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and result["candidates"]:
                    candidate = result["candidates"][0]
                    if "content" in candidate and "parts" in candidate.get("content", {}) and candidate["content"]["parts"]:
                        time.sleep(5.1)
                        return candidate["content"]["parts"][0]["text"].strip()
                    else:
                        finish_reason = candidate.get("finishReason", "UNKNOWN")
                        safety_ratings = candidate.get("safetyRatings", "N/A")
                        raise Exception(f"API Error: No content generated. Finish Reason: {finish_reason}, Safety: {safety_ratings}")
                else:
                    raise Exception(f"API Error: {result.get('error', {}).get('message', 'Invalid response format')}")

            else:
                print(f"API Request failed with status {response.status_code}. Response: {response.text}")
                if response.status_code in [429, 500, 503]:
                    print(f"Retrying in {delay}s...")
                    time.sleep(delay)
                    delay *= 2
                else:
                    response.raise_for_status()

        except requests.exceptions.RequestException as e:
            print(f"Network error on attempt {i+1}: {e}. Retrying in {delay}s...")
            time.sleep(delay)
            delay *= 2

    raise Exception("API request failed after multiple retries.")

# --- 3. Graph Nodes ---

def rohan_agent_node(state: GraphState) -> GraphState:
    """Generates Rohan's message, now with explicit adherence modeling."""
    print(f"--- Week {state['current_week']}, Turn: Rohan ---")

    adherence_check = ""
    if "plan" in "".join(state['conversation_history'][-2:]).lower() and random.random() < 0.5:
        adherence_check = "IMPORTANT: You could not fully adhere to the last suggestion from the Elyx team. Your message should explain why (e.g., 'I was too busy with travel', 'That meal was difficult to find', 'The workout was too long')."

    event_context = f"A key event this week is: {state['event_queue'][0]}" if state['event_queue'] else "It's a regular week."
    # FIX: Inject the current date into the prompt.
    prompt = f"""
    You are Rohan Patel, a 46-year-old busy FinTech executive.
    Your Profile: {json.dumps(state['member_profile'], indent=2)}
    Your Personality: Analytical, driven, but time-constrained. You value data and efficiency. You only adhere to plans about 50% of the time.

    Current Situation:
    - It is Week {state['current_week']} of your 32-week (8-month) journey. The date is around {state['current_date']}.
    - {event_context}
    - Recent Conversation: {''.join(state['conversation_history'][-3:])}
    - {adherence_check}

    Your Task: Based on the situation, generate your next WhatsApp message. It could be a question, feedback, or a status update.
    You MUST use a date around {state['current_date']} in your message timestamp.
    Format: [DD/MM/YY, HH:MM AM/PM] Rohan Patel: [Your message]
    """

    message = call_generative_model(prompt)
    state['conversation_history'].append(message + "\n")
    state['turn_taker'] = 'elyx'
    return state

def elyx_agent_node(state: GraphState) -> GraphState:
    """Generates the Elyx team's response, driven by events and Rohan's messages."""
    print(f"--- Week {state['current_week']}, Turn: Elyx Team ---")

    # FIX: Inject the current date into the prompt.
    prompt = f"""
    You are the Elyx AI, responsible for managing communications.
    Rohan's Profile: {json.dumps(state['member_profile'], indent=2)}
    Elyx Team Roles: {json.dumps(state['elyx_team'], indent=2)}

    Full Conversation History:
    {''.join(state['conversation_history'])}

    Rohan's last message: "{state['conversation_history'][-1]}"
    Current Events: {state['event_queue']}
    The current date is around {state['current_date']}.

    Your Task:
    1.  **Analyze Rohan's last message.**
    2.  **Select the most appropriate Elyx team member to respond.**
    3.  **Generate a response from that team member** in their specific voice.
    4.  **Incorporate and address the top event from the event queue.**
    5.  You MUST use a date around {state['current_date']} in your message timestamp.

    Output only the final WhatsApp message in the correct format.
    Format: [DD/MM/YY, HH:MM AM/PM] [Team Member Name] (Elyx [Role]): [The message]
    """

    message = call_generative_model(prompt)
    if state['event_queue']:
        state['event_queue'].pop(0)

    state['conversation_history'].append(message + "\n")
    state['turn_taker'] = 'rohan'
    state['interaction_count_this_week'] += 1
    return state

# --- 4. Graph Routing and Supervisor Logic ---

def supervisor_node(state: GraphState) -> GraphState:
    """The master planner. Manages the week-to-week simulation, injects events, and saves progress."""

    if state['conversation_history']:
        new_messages = state['conversation_history'][state['last_saved_index']:]
        if new_messages:
            with open(OUTPUT_FILENAME, "a", encoding="utf-8") as f:
                f.write(f"\n\n--- WEEK {state['current_week']} ({state['current_date']}) ---\n")
                f.writelines(new_messages)
            state['last_saved_index'] = len(state['conversation_history'])
            print(f"--- Progress for Week {state['current_week']} saved. ---")

    state['current_week'] += 1
    state['interaction_count_this_week'] = 0
    start_date = datetime(2025, 8, 11)
    current_datetime = start_date + timedelta(weeks=state['current_week'] - 1)
    state['current_date'] = current_datetime.strftime("%d/%m/%y")

    print(f"\n=== SUPERVISOR: ADVANCING TO WEEK {state['current_week']} (Date: {state['current_date']}) ===")

    if state['current_week'] > 32:
        state['simulation_complete'] = True
        return state

    # Strict PDF Timeline (Weeks 1-20)
    if state['current_week'] == 1:
        state['event_queue'].append("Member Onboarding")
    elif state['current_week'] in [2, 3, 4]:
        state['event_queue'].append("Collect Biological Samples & Conduct Physical Exam")
    elif state['current_week'] in [5, 6, 7, 8]:
        state['event_queue'].append("Share Intermittent Test Results & Discuss Interventions")
    elif state['current_week'] == 12:
        state['event_queue'].append("Conduct 3-Month Progress Review Diagnostic Test")
        state['member_profile']['health_stats']['ApoB'] = "115 mg/dL"
        state['member_profile']['health_stats']['Blood_Pressure'] = "138/88 mmHg"

    if state['current_week'] % 4 == 0:
        state['event_queue'].append("Plan for International Business Trip")

    if state['current_week'] > 1 and state['current_week'] % 2 == 0:
        state['event_queue'].append("Update Exercise Plan")

    if state['current_week'] > 20 and state['current_week'] == 24:
         state['event_queue'].append("Conduct 6-Month Progress Review Diagnostic Test")
         state['member_profile']['health_stats']['ApoB'] = "95 mg/dL"
         state['member_profile']['health_stats']['Blood_Pressure'] = "130/82 mmHg"

    return state

def route_logic(state: GraphState) -> str:
    """Determines the next step in the graph."""
    if state['simulation_complete']:
        return END

    if state['interaction_count_this_week'] < random.randint(2, 4):
        return state['turn_taker']
    else:
        return "supervisor"

# --- 5. Main Execution ---

def main():
    initial_state = {
        "conversation_history": [], "current_week": 0, "current_date": "",
        "member_profile": {
            "name": "Rohan Patel", "age": 46, "occupation": "Regional Head of Sales, FinTech",
            "goals": ["Reduce heart disease risk", "Enhance cognitive function"],
            "personality": "Analytical, driven, time-constrained", "chronic_condition": "Hypertension",
            "health_stats": { "Blood_Pressure": "138/88 mmHg", "ApoB": "Unknown" }
        },
        "elyx_team": {
            "Ruby": "Concierge", "Dr. Warren": "Medical Strategist", "Advik": "Performance Scientist",
            "Carla": "Nutritionist", "Rachel": "PT/Physiotherapist", "Neel": "Concierge Lead"
        },
        "turn_taker": 'rohan', "event_queue": [], "simulation_complete": False,
        "interaction_count_this_week": 0,
        "last_saved_index": 0
    }

    with open(OUTPUT_FILENAME, "w", encoding="utf-8") as f:
        f.write("--- ELYX 8-MONTH CONVERSATION LOG ---\n")

    workflow = StateGraph(GraphState)
    workflow.add_node("rohan_agent", rohan_agent_node)
    workflow.add_node("elyx_agent", elyx_agent_node)
    workflow.add_node("supervisor", supervisor_node)

    workflow.set_entry_point("supervisor")

    workflow.add_conditional_edges("supervisor", lambda x: END if x["simulation_complete"] else "rohan_agent")
    workflow.add_conditional_edges("rohan_agent", lambda x: "elyx_agent")
    workflow.add_conditional_edges("elyx_agent", route_logic, {"rohan": "rohan_agent", "supervisor": "supervisor"})

    app = workflow.compile()

    print("--- Starting Elyx 32-Week (8-Month) Detailed Simulation ---")
    final_state = app.invoke(initial_state, {"recursion_limit": 400})
    print("--- Simulation Complete ---")

    print("\n==========================================")
    print("Generation Complete!")
    print(f"Full 8-month conversation saved to '{OUTPUT_FILENAME}'")
    print("==========================================")

if __name__ == "__main__":
    main()

